{"ast":null,"code":"const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst otpGenerator = require(\"otp-generator\");\nconst app = express();\nconst port = 3000; // Replace with your desired port\n\napp.use(bodyParser.json());\n\n// Generate and store OTP for a mobile number\nconst otpStore = new Map();\n\n// Endpoint to generate OTP for a mobile number (POST request)\napp.post(\"/generate-otp\", (req, res) => {\n  const {\n    mobileNumber\n  } = req.body;\n  if (!mobileNumber) {\n    return res.status(400).json({\n      error: \"Mobile number is required.\"\n    });\n  }\n  const otp = otpGenerator.generate(6, {\n    digits: true,\n    alphabets: false,\n    upperCase: false,\n    specialChars: false\n  });\n  otpStore.set(mobileNumber, otp);\n  res.status(200).json({\n    otp\n  });\n});\n\n// Endpoint to get OTP for a mobile number (GET request)\napp.get(\"/get-otp\", (req, res) => {\n  const {\n    mobileNumber\n  } = req.query;\n  if (!mobileNumber) {\n    return res.status(400).json({\n      error: \"Mobile number is required.\"\n    });\n  }\n  const storedOTP = otpStore.get(mobileNumber);\n  if (storedOTP) {\n    res.status(200).json({\n      otp: storedOTP\n    });\n  } else {\n    res.status(404).json({\n      error: \"OTP not found for the given mobile number.\"\n    });\n  }\n});\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});","map":{"version":3,"names":["express","require","bodyParser","otpGenerator","app","port","use","json","otpStore","Map","post","req","res","mobileNumber","body","status","error","otp","generate","digits","alphabets","upperCase","specialChars","set","get","query","storedOTP","listen","console","log"],"sources":["C:/Users/Surya/OneDrive/Desktop/admitkard-assignment/frontend/src/component/signin/signin.js"],"sourcesContent":["const express = require(\"express\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst otpGenerator = require(\"otp-generator\");\r\n\r\nconst app = express();\r\nconst port = 3000; // Replace with your desired port\r\n\r\napp.use(bodyParser.json());\r\n\r\n// Generate and store OTP for a mobile number\r\nconst otpStore = new Map();\r\n\r\n// Endpoint to generate OTP for a mobile number (POST request)\r\napp.post(\"/generate-otp\", (req, res) => {\r\n  const { mobileNumber } = req.body;\r\n  if (!mobileNumber) {\r\n    return res.status(400).json({ error: \"Mobile number is required.\" });\r\n  }\r\n\r\n  const otp = otpGenerator.generate(6, {\r\n    digits: true,\r\n    alphabets: false,\r\n    upperCase: false,\r\n    specialChars: false,\r\n  });\r\n  otpStore.set(mobileNumber, otp);\r\n\r\n  res.status(200).json({ otp });\r\n});\r\n\r\n// Endpoint to get OTP for a mobile number (GET request)\r\napp.get(\"/get-otp\", (req, res) => {\r\n  const { mobileNumber } = req.query;\r\n  if (!mobileNumber) {\r\n    return res.status(400).json({ error: \"Mobile number is required.\" });\r\n  }\r\n\r\n  const storedOTP = otpStore.get(mobileNumber);\r\n  if (storedOTP) {\r\n    res.status(200).json({ otp: storedOTP });\r\n  } else {\r\n    res\r\n      .status(404)\r\n      .json({ error: \"OTP not found for the given mobile number.\" });\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAe,CAAC;AAE7C,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI,CAAC,CAAC;;AAEnBD,GAAG,CAACE,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAE1B;AACAL,GAAG,CAACM,IAAI,CAAC,eAAe,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEC;EAAa,CAAC,GAAGF,GAAG,CAACG,IAAI;EACjC,IAAI,CAACD,YAAY,EAAE;IACjB,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC;MAAES,KAAK,EAAE;IAA6B,CAAC,CAAC;EACtE;EAEA,MAAMC,GAAG,GAAGd,YAAY,CAACe,QAAQ,CAAC,CAAC,EAAE;IACnCC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE,KAAK;IAChBC,SAAS,EAAE,KAAK;IAChBC,YAAY,EAAE;EAChB,CAAC,CAAC;EACFd,QAAQ,CAACe,GAAG,CAACV,YAAY,EAAEI,GAAG,CAAC;EAE/BL,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC;IAAEU;EAAI,CAAC,CAAC;AAC/B,CAAC,CAAC;;AAEF;AACAb,GAAG,CAACoB,GAAG,CAAC,UAAU,EAAE,CAACb,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEC;EAAa,CAAC,GAAGF,GAAG,CAACc,KAAK;EAClC,IAAI,CAACZ,YAAY,EAAE;IACjB,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC;MAAES,KAAK,EAAE;IAA6B,CAAC,CAAC;EACtE;EAEA,MAAMU,SAAS,GAAGlB,QAAQ,CAACgB,GAAG,CAACX,YAAY,CAAC;EAC5C,IAAIa,SAAS,EAAE;IACbd,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACR,IAAI,CAAC;MAAEU,GAAG,EAAES;IAAU,CAAC,CAAC;EAC1C,CAAC,MAAM;IACLd,GAAG,CACAG,MAAM,CAAC,GAAG,CAAC,CACXR,IAAI,CAAC;MAAES,KAAK,EAAE;IAA6C,CAAC,CAAC;EAClE;AACF,CAAC,CAAC;AAEFZ,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACrBuB,OAAO,CAACC,GAAG,CAAE,6BAA4BxB,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}